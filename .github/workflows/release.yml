name: Publicar Release de Java Desktop App

on:
  push:
    tags:
      - 'v*' # Esto activará el workflow cuando se cree una nueva etiqueta que empiece por 'v', por ejemplo, v1.0.0

permissions:
  contents: write # This is the crucial line!

jobs:
  build_and_release:
    runs-on: ubuntu-latest # Ejecuta el trabajo en un sistema operativo Ubuntu

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4 # Obtiene tu código del repositorio

      - name: Configurar JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven' # Si usas Maven, esto cachea las dependencias para builds más rápidos

      - name: Compilar con Maven
        run: mvn clean package

      - name: Obtener el nombre del archivo JAR
        id: get_jar_name
        run: |
          # Esto asume que tu JAR se llama similar a 'your-app-1.0.0.jar' y está en el directorio 'target/' o 'build/libs/'
          # Ajusta esta línea para que coincida con el nombre real de tu JAR
          JAR_FILE=$(find target/ -name "*.jar" -print -quit) # Para Maven
          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT

      - name: Crear Release y Subir JAR
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.get_jar_name.outputs.jar_file }} # La ruta a tu archivo JAR
          # files: target/*.jar # Alternativamente, si sabes que solo habrá un JAR en ese directorio
          name: Versión ${{ github.ref_name }} # Nombre de la release, por ejemplo, "Versión v1.0.0"
          tag_name: ${{ github.ref }} # La etiqueta de Git que disparó el workflow (ej. v1.0.0)
          body: |
            Please refer to [CHANGELOG.md](https://github.com/raul-izquierdo/teams/blob/master/CHANGELOG.md) for details on this release.
          prerelease: false # Cambia a 'true' si es una pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token de GitHub, ya disponible por defecto
